# -*- coding: utf-8 -*-
"""Week-17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZ3HYf-XJsXQR9n5D0Y2RHqMnHyeLbCC
"""

import pandas as pd
import matplotlib.pyplot as plt
!pip install pyecharts

pip install mitosheet

"""!pip install pyecharts"""

# load webpage resource
url='/content/cgumed_lectures.html'
pages=pd.read_html(url)

# Find out where the table we want

cgu=pages[12]

# copy whole the table except the columns of features
df=cgu[1:]

# reset columns of DataFrame 
df.columns=cgu.loc[0,:].values

import mitosheet

df.reset_index(inplace=True)
df

# retrieve the number of person registered for each lecture
df['num']=0
for i in range(0,len(df)):
    # retireve the number before "/"
    df['num'][i]=df['é¸èª²äººæ¸ Seats'].iloc(0)[i].split('/')[0]
df[:4]

df['num']=df['num'].astype(int)

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
sns.set()

# %matplotlib inline

# First view for distributed of registers 
sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.histplot(df['num']);

from pyecharts.charts import Bar
from pyecharts import options as opts

# make a categorical feature for size od persions in registered lecture
def classify(x):
    if x<10:
       return '[0,10)'
    elif x<30:
       return '[10,30)' 
    elif x<60:
       return '[30,60)'
    else:
       return '[60,]'

df

df['Class']=df['num'].apply(classify)

sns.set(rc={'figure.figsize':(11.7,8.27)})

sns.histplot(df['Class'],discrete=True, shrink=0.8,);

bins=['[0,10)','[10,30)','[30,60)','[60,]']
Class_count=df[['Class']].value_counts()
count_bins=[Class_count[bin] for bin in bins]

count_bins==[29, 53, 49, 27]

"""Class_dic=df[['Class']].value_counts().to_dict()"""

len(bins),len(count_bins)

# 不习惯链式调用的开发者依旧可以单独调用方法
bar = Bar()
#bar.add_xaxis(list(Class_dic.keys()))
bar.add_xaxis(bins)
#bar.add_yaxis("選課人數", count_bins)
bar.add_yaxis("課程數目",[29, 53, 49, 27])
bar.set_global_opts(title_opts=opts.TitleOpts(
    title="醫學系 112-1 課程", subtitle='選課人數範圍'),
    #yaxis_opts=opts.AxisOpts(name="課程數"),
    xaxis_opts=opts.AxisOpts(name="選課人數"),                
    )
bar.render_notebook()

[z for z in zip( bins, count_bins)]==[('[0,10)', 29), ('[10,30)', 53), ('[30,60)', 49), ('[60,]', 27)]

Count_bins=count_bins

from pyecharts.charts import Pie
from pyecharts.faker import Faker

c = (
    Pie()
    #.add("", [list(z) for z in zip([ z[0] for z in list(Class_dic)], list(Class_dic.values()))],
    #.add("",  [z for z in zip( bins, Count_bins)],
    .add("",[['[0,10)', 29], ['[10,30)', 53], ['[30,60)', 49], ['[60,]', 27]],        
         radius=["30%", "75%"],
         center=["35%", "50%"],
         rosetype="radius", 
        )
    .set_global_opts(title_opts=opts.TitleOpts(title="通識中心 112-1 課程", 
                                               subtitle='選課人數範圍',
                                               pos_left='left',
                                               pos_top='0%'))
    .set_series_opts(label_opts=opts.LabelOpts(formatter="人數 {b}: {c} 門"))
)
c.render_notebook()

# explode weekday-duration, "Thu 10:10-12:00", into "weekday" and "duration", two features
def seperate_day_time(df, feature):
    df[feature+'_day'] = df[feature].apply(lambda x: x.split(' ')[0])
    df[feature+'_time'] = df[feature].apply(lambda x: x.split(' ')[1])
    return df

df=seperate_day_time(df, "ä¸èª²æé Class Sched.")

# determine time is at morring or afternoon
def map_time(df, feature):
    df['time_slot'] = df[feature].apply(lambda x: 'morning' if x.split('-')[0] < '12:00' else 'afternoon' if x.split('-')[0] > '12:00' else 'none')
    return df

df= map_time(df, "ä¸èª²æé Class Sched._time")

df.loc[df['ä¸èª²æé Class Sched._day']=='0','ä¸èª²æé Class Sched._day']='None'

sns.histplot(data=df, x="ä¸èª²æé Class Sched._day", hue="time_slot");

person_bins=['[0,10)','[10,30)','[30,60)','[60,]']
person_count_M=df.loc[df['time_slot']=='morning']['Class'].value_counts()
person_count_A=df.loc[df['time_slot']=='afternoon']['Class'].value_counts()

person_count_bins_A=[person_count_A[bin] for bin in person_bins]
person_count_bins_M=[person_count_M[bin] for bin in person_bins]

person_count_bins_A,person_count_bins_M

# 不习惯链式调用的开发者依旧可以单独调用方法
bar = Bar()
bar.add_xaxis(person_bins)
bar.add_yaxis(" Morning 課程數目", [12, 16, 15, 8])
bar.add_yaxis(" Afternoon 課程數目",[17, 37, 34, 19])
bar.set_global_opts(title_opts=opts.TitleOpts(title="通識中心 112-1 課程", subtitle="上下午課程 人數分布"))
bar.render_notebook()

from pyecharts.charts import Pie
from pyecharts.faker import Faker

c = (
    Pie()
    #.add("", [list(z) for z in zip([ z[0] for z in list(Class_dic)], list(Class_dic.values()))],
    #.add("",  [z for z in zip( bins, Count_bins)],
    .add("課程",[['[0,10)', 29], ['[10,30)', 53], ['[30,60)', 49], ['[60,]', 27]],        
         radius=["50%", "75%"],
         center=["35%", "50%"],
         rosetype="radius", 
        )
    .add(" Morning 課程",[['[0,10)', 12], ['[10,30)', 16], ['[30,60)', 15], ['[60,]', 8]],        
         radius=["25%", "38%"],
         center=["35%", "50%"],
         #rosetype="radius", 
        )
    .add(" afternoon 課程",[['[0,10)', 17], ['[10,30)', 36], ['[30,60)', 34], ['[60,]', 19]],        
         radius=["10%", "18%"],
         center=["35%", "50%"],
         #rosetype="radius", 
        )
    .set_global_opts(title_opts=opts.TitleOpts(title="通識中心 112-1 課程", 
                                               subtitle='選課人數範圍',
                                               pos_left='left',
                                               pos_top='0%'))
    .set_series_opts(label_opts=opts.LabelOpts(formatter="人數 {b}: {c} 門"))
)
c.render_notebook()



df1=df[df['ä¸èª²æé Class Sched._day']!='None']
weekday_bins=['Mon', 'Tue', 'Wed', 'Thu', 'Fri']
weekday_count_M=df1.loc[df1['time_slot']=='morning']['ä¸èª²æé Class Sched._day'].value_counts()
weekday_count_A=df1.loc[df1['time_slot']=='afternoon']['ä¸èª²æé Class Sched._day'].value_counts()

weekday_count_bins_A=[weekday_count_A[bin] for bin in weekday_bins]
weekday_count_bins_M=[weekday_count_M[bin] for bin in weekday_bins]

bar = Bar()
bar.add_xaxis(weekday_bins)
bar.add_yaxis(" Morning 課程數目", [7, 5, 13, 12, 7])
bar.add_yaxis(" Afternoon 課程數目",[33, 26, 19, 18, 11] )
bar.set_global_opts(title_opts=opts.TitleOpts(title="醫學系 112-1 課程", subtitle="每週課程 人數分布"))
bar.render_notebook()

"""!pip install mitosheet"""

